# See the writing guide of rbs: https://github.com/ruby/rbs#guides
module ClaudeJr
  class Error < StandardError
  end

  class APIError < Error
    attr_reader error_response: ErrorResponse
    def initialize: (String, ErrorResponse) -> void
  end

  VERSION: String

  def self.client: () -> Client

  class Tool
    attr_reader name: String
    attr_reader description: String
    attr_reader parameters: Hash[Symbol | String, untyped]

    def initialize: (name: String, description: String, parameters: Hash[Symbol | String, untyped]) -> void
    def to_h: () -> Hash[Symbol, untyped]
    def to_json: () -> Hash[Symbol, untyped]
  end

  class Client
    API_URL: String
    MODEL: String

    attr_accessor connection: Faraday::Connection

    def initialize: () -> void
    def chat: (
      String message,
      ?model: String,
      ?tools: (Array[Tool | Hash[Symbol, untyped]])?
    ) -> ChatResponse
  end

  class ChatResponse
    attr_reader model: String
    attr_reader created_at: String
    attr_reader message: Hash[Symbol, untyped]
    attr_reader done: bool
    attr_reader total_duration: Integer
    attr_reader load_duration: Integer
    attr_reader prompt_eval_count: Integer
    attr_reader prompt_eval_duration: Integer
    attr_reader eval_count: Integer
    attr_reader eval_duration: Integer

    def initialize: (Hash[Symbol, untyped]) -> void
    private
    def parse_message: (Hash[Symbol, untyped]) -> Hash[Symbol, untyped]
    def parse_tool_calls: (Array[Hash[Symbol, untyped]]?) -> Array[Hash[Symbol, untyped]]
  end

  class ErrorResponse
    attr_reader message: String
    def initialize: (Hash[Symbol, untyped]) -> void
  end
end
